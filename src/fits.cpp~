/*** grid_fits.cpp
These small utility routines let the user read/write vectors
from the C++ stdlib into FITS files and reverse. 
Additional routines for reading and writing headers are also
included.   
 
Julian Merten
JPL/Caltech
Dec 2014
jmerten@caltech.edu
***/

#include <ugrid/grid_fits.h>

template <class T> void fits_write_img(string fits_filename, vector<T> *input, int x_dim = 0, int y_dim = 0, string extension_name = "")
{
  time_t creation_time;
  creation_time = time(NULL);
  string plain_time;
  plain_time = ctime(&creation_time);
  string creator = "libmfree";

  int dim = input->size();
  long naxis = 2;
  long naxes[2];

  if(x_dim == 0 && y_dim == 0)
    {
      naxes[0] = floor(sqrt(dim));
      naxes[1] = naxes[0];
    }
  else if(y_dim == 0)
    {
      naxes[0] = x_dim;
      naxes[1] = naxes[0];
    }
  else
    {
      naxes[0] = x_dim;
      naxes[1] = y_dim;
    } 

  if(dim < naxes[0]*naxes[1])
    {
      throw invalid_argument("MFREE FITS: Invalid input vector size.");
    }
  fits_filename = "!"+fits_filename;
  int bitpix = fits_type(input);


  std::auto_ptr<FITS> img(0);
  if(extension == "")
    {
      img.reset(new FITS(filename,bitpix,naxis,naxes));
      img->pHDU().write(1, naxes[0]*naxes[1], input);

      //ENTER LIBRARY WATERMARK HERE
    }
  else 
    {
      img.reset(new FITS(filename,Write));
      ExtHDU* imageExt = img->addImage(extension, bitpix, naxes);
      imageExt->write(1, naxes[0]*naxes[1], input);
      //ENTER LIBRARY WATERMARK HERE
    }
}

template <class T> vector<T> fits_read_img(string fits_filename, string extension_name = "" )
{

}

template <class T> void fits_write_header(string fits_filename, string keyword, T input, string description= "", string extension_name = "")
{

}

template <class T> T fits_read_header(string fits_filename, string keyword, string extension_name = "")
{

}
